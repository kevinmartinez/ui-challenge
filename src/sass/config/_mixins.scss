// I place the Sass mixins in an own file, perhaps this should be moved together with variables in a config file

// Tablet and landscape media query mixin, takes its Sass variables from the variables file
@mixin media-tablet {
  @media (min-width: #{$tablet}) and (orientation: landscape) {
    @content;
  }
}

// Desktop
@mixin media-desktop {
  // Desktop variable set to 1224px
  @media (min-width: #{$desktop}) {
    @content;
  }
}

// I like to use REM when doing font-sizes, mostly
// because of the nature of parent and children that both have an em
// declaration. EM is good used in margins and paddings, so that
// is one thing i would have gone for with more time
// Meanwhile, i always tend to relate to pixels when calculating rems
// and so on, so there are some nice mixins for converting pixels
// to em or rem
@function rem($pixel, $base:16px) {
  @return($pixel / $base) * 1rem;
}

@mixin display-grid {
  display: -ms-grid;
  display:     grid;
}

// mixin for backwards compat with IE11, i had to do some research to make sure of using some old IE11 Grid values, some that are not fixed with a tool like Autoprefixer, i tested IE11 quite early, and it took some time but most of the quirks should work, i am sure there are a lot that can be done.
@mixin grid-child ($col-start, $col-end, $row-start, $row-end) {
  -ms-grid-column: $col-start;
  -ms-grid-column-span: $col-end - $col-start;
  -ms-grid-row: $row-start;
  -ms-grid-row-span: $row-end - $row-start;
      grid-column: #{$col-start}/#{$col-end};
      grid-row: #{$row-start}/#{$row-end};
      // row-gap does not work in IE11, but putting this
      // media query inside of the mixins makes it fallback quite good
      @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
        /* fallback instead of grid-gap */
        padding: 10px;
      }
}
