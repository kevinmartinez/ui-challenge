// I went with CSS Grid as layout option.
// .grid-wrapper {
  /*
  This grid-wrapper wraps two own grids,i used this for layout consistency and to make use of '
  'ake CSS Grid and latest Angular work together to
  support IE11 was quite challenging,
  so the end result of the grid is quite verbose,
  the big catch is that, allthough CSS Grid is
  supported in IE11, it requires all columns to
  be explicit layed out from start to begin and include rows.
  The tradeoff is worth it imo and the syntax can be
  improved a lot i think, for example with different
  mixins and/or functions
  */

.grid {
  @include display-grid;
  grid-gap: 10px;
  grid-template-columns: repeat(6, 1fr);
  // -ms-grid-columns: 1fr 1fr 1fr 1fr;
  // -ms-grid-rows: 1fr 1fr 1fr;
  grid-template-rows: repeat(6, 1fr);

  // @include grid-child(1, 3, 1, 2);

  @include media-tablet {
    // @include grid-child(1, 2, 1, 2);
    grid-template-columns: repeat(12, 1fr);
    grid-template-rows: repeat(3, 1fr);
    // -ms-grid-columns: 1fr 1fr 1fr 1fr;
    // -ms-grid-rows: 1fr 1fr 1fr;
  }
  // This is included here because i started to test the BEM modifier selectors nested
  // in Sass, but it is still heavy repeated code, with more time i would have prioritized this,
  // but having it in the grid Sass partial and with a big TODO in it is ok for now since
  // the Grid seem to work really good in IE11
  // &--half {
  //   @include display-grid;
  //   grid-gap: 10px;
  //   grid-template-columns: repeat(4, 1fr);
  //   -ms-grid-columns: 1fr 1fr 1fr 1fr;
  //   -ms-grid-rows: 1fr 1fr 1fr;
  //   grid-template-rows: 1fr 1fr 1fr;

  //   @include grid-child(1, 3, 2, 3);

  //   @include media-tablet {
  //     @include grid-child(2, 3, 1, 2);
  //   }
  // }
}

// All styles for the CSS Grid, they call a mixin that calculates
// the col start, col end, row, start, & row end, as well as a calculation
// needed for IE11, since IE11 need two grid placement declarations


.gi-1 { // First name field
  @include grid-child(1, 4, 1, 2);

  // @include media-tablet {
  //   @include grid-child(1, 4, 1, 2);
  // }
}

.gi-2 { // Last name field
  //grid-column: span 3;
  @include grid-child(4, 7, 1, 2);

  // @include media-tablet {
  //   @include grid-child(4, 7, 1, 2);
  // }
}

.gi-3 {  // Birthdate field
  @include grid-child(1, 5, 2, 3);

  // @include media-tablet {
  //   @include grid-child(1, 5, 2, 3);
  // }
}

.gi-4 { // Gender field
  @include grid-child(5, 7, 2, 3);

  // @include media-tablet {
  //   @include grid-child(5, 7, 2, 3);
  // }
}

.gi-5 { // Address field
  @include grid-child(1, 7, 3, 4);

  // @include media-tablet {
  //   @include grid-child(1, 7, 3, 4);
  // }
}

.gi-6 { // Post code field
  @include grid-child(1, 3, 4, 5);
  @include media-tablet {
    @include grid-child(7, 9, 1, 2);
  }
}

.gi-7 { // City field
  @include grid-child(3, 7, 4, 5);
  @include media-tablet {
    @include grid-child(9, 13, 1, 2);
  }
}

.gi-8 { // Country field
  @include grid-child(1, 7, 5, 6);
  @include media-tablet {
    @include grid-child(7, 13, 2, 3);
  }
}

.gi-9 { // Country code prefix field
  @include grid-child(1, 3, 6, 7);
  @include media-tablet {
    @include grid-child(7, 9, 3, 4);
  }
}

.gi-10 { // Phone number field
  @include grid-child(3, 7, 6, 7);
  @include media-tablet {
    @include grid-child(9, 13, 3, 4);
  }
}
